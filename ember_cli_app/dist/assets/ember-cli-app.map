{"version":3,"sources":["vendor/ember-cli/app-prefix.js","ember-cli-app/adapters/application.js","ember-cli-app/adapters/stat.js","ember-cli-app/app.js","ember-cli-app/components/app-version.js","ember-cli-app/controllers/array.js","ember-cli-app/controllers/object.js","ember-cli-app/initializers/app-version.js","ember-cli-app/initializers/export-application-global.js","ember-cli-app/models/person.js","ember-cli-app/models/stat.js","ember-cli-app/router.js","ember-cli-app/routes/people.js","ember-cli-app/routes/stats.js","ember-cli-app/templates/application.js","ember-cli-app/templates/people.js","ember-cli-app/templates/stats.js","ember-cli-app/tests/adapters/application.jshint.js","ember-cli-app/tests/adapters/stat.jshint.js","ember-cli-app/tests/app.jshint.js","ember-cli-app/tests/helpers/resolver.js","ember-cli-app/tests/helpers/resolver.jshint.js","ember-cli-app/tests/helpers/start-app.js","ember-cli-app/tests/helpers/start-app.jshint.js","ember-cli-app/tests/models/person.jshint.js","ember-cli-app/tests/models/stat.jshint.js","ember-cli-app/tests/router.jshint.js","ember-cli-app/tests/routes/people.jshint.js","ember-cli-app/tests/routes/stats.jshint.js","ember-cli-app/tests/test-helper.js","ember-cli-app/tests/test-helper.jshint.js","ember-cli-app/tests/unit/adapters/application-test.js","ember-cli-app/tests/unit/adapters/application-test.jshint.js","ember-cli-app/tests/unit/adapters/stat-test.js","ember-cli-app/tests/unit/adapters/stat-test.jshint.js","ember-cli-app/tests/unit/models/person-test.js","ember-cli-app/tests/unit/models/person-test.jshint.js","ember-cli-app/tests/unit/models/stat-test.js","ember-cli-app/tests/unit/models/stat-test.jshint.js","ember-cli-app/tests/unit/routes/people-test.js","ember-cli-app/tests/unit/routes/people-test.jshint.js","ember-cli-app/tests/unit/routes/stats-test.js","ember-cli-app/tests/unit/routes/stats-test.jshint.js","ember-cli-app/tests/unit/serializers/stat-test.js","ember-cli-app/tests/unit/serializers/stat-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('ember-cli-app/adapters/application', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].RESTAdapter.extend({\n    host: 'http://localhost:3000'\n  });\n\n});","define('ember-cli-app/adapters/stat', ['exports', 'ember-cli-app/adapters/application', 'ember'], function (exports, ApplicationAdapter, Ember) {\n\n  'use strict';\n\n  var $ = Ember['default'].$;\n\n  function extractStats(htmlDocument) {\n    var stats = [];\n\n    var rows = $(htmlDocument).find('tbody tr');\n\n    $.each(rows, function (_, row) {\n      var props = $(row).find('td');\n\n      var stat = {\n        id: $.trim($(props[0]).text()),\n        age: $.trim($(props[1]).text()),\n        gender: $.trim($(props[2]).text()),\n        height: $.trim($(props[3]).text()),\n        eyeColour: $.trim($(props[4]).text())\n      };\n\n      stats.push(stat);\n    });\n\n    return { stats: stats };\n  }\n\n  exports['default'] = ApplicationAdapter['default'].extend({\n    host: 'http://localhost:8000',\n\n    findAll: function findAll(store, type) {\n      var url = this.get('host');\n\n      return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n\n        xhr.open(\"GET\", url, true);\n        xhr.responseType = \"document\";\n\n        xhr.onload = function () {\n          var payload = extractStats(xhr.response);\n          Ember['default'].run(null, resolve, payload);\n        };\n\n        xhr.onerror = function () {\n          return Ember['default'].run(null, reject, xhr.statusText);\n        };\n\n        xhr.send();\n      });\n    }\n  });\n\n});","define('ember-cli-app/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'ember-cli-app/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('ember-cli-app/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'ember-cli-app/config/environment'], function (exports, AppVersionComponent, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = AppVersionComponent['default'].extend({\n    version: version,\n    name: name\n  });\n\n});","define('ember-cli-app/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('ember-cli-app/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('ember-cli-app/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ember-cli-app/config/environment'], function (exports, initializerFactory, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: initializerFactory['default'](name, version)\n  };\n\n});","define('ember-cli-app/initializers/export-application-global', ['exports', 'ember', 'ember-cli-app/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('ember-cli-app/models/person', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr('string'),\n    age: DS['default'].attr('number')\n  });\n\n});","define('ember-cli-app/models/stat', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    age: DS['default'].attr('string'),\n    gender: DS['default'].attr('string'),\n    height: DS['default'].attr('string'),\n    eyeColour: DS['default'].attr('string')\n  });\n\n});","define('ember-cli-app/router', ['exports', 'ember', 'ember-cli-app/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('people');\n    this.route('stats');\n  });\n\n  exports['default'] = Router;\n\n});","define('ember-cli-app/routes/people', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return this.store.findAll('person');\n    }\n  });\n\n});","define('ember-cli-app/routes/stats', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return this.store.findAll('stat');\n    }\n  });\n\n});","define('ember-cli-app/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\n            \"multiple-nodes\",\n            \"wrong-type\"\n          ]\n        },\n        \"revision\": \"Ember@2.2.0\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"ember-cli-app/templates/application.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,2,2,contextualElement);\n        return morphs;\n      },\n      statements: [\n        [\"content\",\"outlet\",[\"loc\",[null,[3,0],[3,10]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('ember-cli-app/templates/people', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.2.0\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 1,\n              \"column\": 0\n            },\n            \"end\": {\n              \"line\": 5,\n              \"column\": 0\n            }\n          },\n          \"moduleName\": \"ember-cli-app/templates/people.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"p\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          return morphs;\n        },\n        statements: [\n          [\"content\",\"person.name\",[\"loc\",[null,[3,4],[3,19]]]]\n        ],\n        locals: [\"person\"],\n        templates: []\n      };\n    }());\n    return {\n      meta: {\n        \"fragmentReason\": {\n          \"name\": \"missing-wrapper\",\n          \"problems\": [\n            \"wrong-type\"\n          ]\n        },\n        \"revision\": \"Ember@2.2.0\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 5,\n            \"column\": 9\n          }\n        },\n        \"moduleName\": \"ember-cli-app/templates/people.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        dom.insertBoundary(fragment, null);\n        return morphs;\n      },\n      statements: [\n        [\"block\",\"each\",[[\"get\",\"model\",[\"loc\",[null,[1,8],[1,13]]]]],[],0,null,[\"loc\",[null,[1,0],[5,9]]]]\n      ],\n      locals: [],\n      templates: [child0]\n    };\n  }()));\n\n});","define('ember-cli-app/templates/stats', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        meta: {\n          \"fragmentReason\": false,\n          \"revision\": \"Ember@2.2.0\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 2\n            },\n            \"end\": {\n              \"line\": 12,\n              \"column\": 2\n            }\n          },\n          \"moduleName\": \"ember-cli-app/templates/stats.hbs\"\n        },\n        isEmpty: false,\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n      ID: \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"ul\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createTextNode(\"Eye Colour: \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"span\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createTextNode(\"Gender: \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\" \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createTextNode(\"Age: \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createTextNode(\"Height: \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createComment(\"\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [3]);\n          var element2 = dom.childAt(element1, [1]);\n          var element3 = dom.childAt(element2, [3]);\n          var morphs = new Array(6);\n          morphs[0] = dom.createMorphAt(element0,1,1);\n          morphs[1] = dom.createMorphAt(element2,1,1);\n          morphs[2] = dom.createAttrMorph(element3, 'style');\n          morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);\n          morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);\n          morphs[5] = dom.createMorphAt(dom.childAt(element1, [7]),1,1);\n          return morphs;\n        },\n        statements: [\n          [\"content\",\"stat.id\",[\"loc\",[null,[4,10],[4,21]]]],\n          [\"content\",\"stat.eyeColour\",[\"loc\",[null,[6,24],[6,42]]]],\n          [\"attribute\",\"style\",[\"concat\",[\"background-color: \",[\"get\",\"stat.eyeColour\",[\"loc\",[null,[6,76],[6,90]]]],\"; width: 10px; height: 10px; display: inline-block\"]]],\n          [\"content\",\"stat.gender\",[\"loc\",[null,[7,20],[7,35]]]],\n          [\"content\",\"stat.age\",[\"loc\",[null,[8,17],[8,29]]]],\n          [\"content\",\"stat.height\",[\"loc\",[null,[9,20],[9,35]]]]\n        ],\n        locals: [\"stat\"],\n        templates: []\n      };\n    }());\n    return {\n      meta: {\n        \"fragmentReason\": false,\n        \"revision\": \"Ember@2.2.0\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 13,\n            \"column\": 5\n          }\n        },\n        \"moduleName\": \"ember-cli-app/templates/stats.hbs\"\n      },\n      isEmpty: false,\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"ul\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        return morphs;\n      },\n      statements: [\n        [\"block\",\"each\",[[\"get\",\"model\",[\"loc\",[null,[2,10],[2,15]]]]],[],0,null,[\"loc\",[null,[2,2],[12,11]]]]\n      ],\n      locals: [],\n      templates: [child0]\n    };\n  }()));\n\n});","define('ember-cli-app/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/adapters/stat.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/stat.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(false, 'adapters/stat.js should pass jshint.\\nadapters/stat.js: line 31, col 28, \\'type\\' is defined but never used.\\nadapters/stat.js: line 31, col 21, \\'store\\' is defined but never used.\\n\\n2 errors'); \n  });\n\n});","define('ember-cli-app/tests/app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/helpers/resolver', ['exports', 'ember/resolver', 'ember-cli-app/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('ember-cli-app/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/helpers/start-app', ['exports', 'ember', 'ember-cli-app/app', 'ember-cli-app/config/environment'], function (exports, Ember, Application, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('ember-cli-app/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/models/person.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/person.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'models/person.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/models/stat.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/stat.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'models/stat.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/router.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/routes/people.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/people.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'routes/people.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/routes/stats.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/stats.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'routes/stats.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/test-helper', ['ember-cli-app/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('ember-cli-app/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n});","define('ember-cli-app/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/adapters/stat-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('adapter:stat', 'Unit | Adapter | stat', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n});","define('ember-cli-app/tests/unit/adapters/stat-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/stat-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/stat-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/models/person-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('person', 'Unit | Model | person', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('ember-cli-app/tests/unit/models/person-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/person-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/models/person-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/models/stat-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('stat', 'Unit | Model | stat', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('ember-cli-app/tests/unit/models/stat-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/stat-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/models/stat-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/routes/people-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:people', 'Unit | Route | people', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n});","define('ember-cli-app/tests/unit/routes/people-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/people-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/routes/people-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/routes/stats-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:stats', 'Unit | Route | stats', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n});","define('ember-cli-app/tests/unit/routes/stats-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/stats-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/routes/stats-test.js should pass jshint.'); \n  });\n\n});","define('ember-cli-app/tests/unit/serializers/stat-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel('stat', 'Unit | Serializer | stat', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:stat']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n\n});","define('ember-cli-app/tests/unit/serializers/stat-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers');\n  QUnit.test('unit/serializers/stat-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/stat-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('ember-cli-app/config/environment', ['ember'], function(Ember) {\n  var prefix = 'ember-cli-app';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"ember-cli-app/tests/test-helper\");\n} else {\n  require(\"ember-cli-app/app\")[\"default\"].create({\"name\":\"ember-cli-app\",\"version\":\"0.0.0+99cb24a6\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"ember-cli-app.js"}